extends ../_internal-template

block vars
  - var activeLink = 'docs';
  - var title = 'Template7 Pages | Framework7 Documentation';

block content
  .docs-wrap
    .docs-nav
      include ../_docs-menu
    .docs-content
      h1 Template7 Pages
      p Framework7 allows you to render your Ajax and Dynamic pages as Template7 templates with specified context and provides a lot of different ways to do that.
      p To make it work, first of all, we need to enable it by passing the following parameter on <a href="init-app.html">App initialization</a>:
      pre
        code
          | var myApp = new Framework7({
          |     template7Pages: true // enable Template7 rendering for Ajax and Dynamic pages
          | });
      p That is all, now all of your Ajax and Dynamic pages will be rendered as Template7 templates where you may use <a href="template7.html">Template7 syntax</a>
      h2 Templates/Pages Data
      p Now we need to learn how to pass required data/context for specific pages. For that we may specify all pages data in additional <code>template7Data</code> parameter passed on App initialization. Let's look on its syntax:
      pre
        code.js
          | var myApp = new Framework7({
          |     template7Pages: true, //enable Template7 rendering for pages
          | 
          |     //Specify templates/pages data
          |     template7Data: {
          |         // This context will applied for page/template with "about.html" URL
          |         'url:about.html': {
          |             name: 'John Doe',
          |             age: 38,
          |             company: 'Apple',
          |             position: 'Developer'
          |         },
          | 
          |         // This context will applied for page/template with data-page="contacts"
          |         'page:contacts': {
          |             tel: '(999)-111-22-33',
          |             email: 'contact@john.doe'
          |         },
          | 
          |         // Plain data object
          |         'languages': {
          |             'frontend': [
          |                 {
          |                     name:'JavaScript',
          |                     description: 'Dynamic computer programming language[5]. It is most commonly used as part of web browsers, whose implementations allow...'
          |                 },
          |                 {
          |                     name:'CSS',
          |                     description: 'Style sheet language used for describing the look and formatting of a document written in a markup language...'
          |                 },
          |             ],
          |             'backend': [
          |                 {
          |                     name: 'PHP',
          |                     description: 'Server-side scripting language designed for web development but also used as a general-purpose programming language...'
          |                 },
          |                 {
          |                     name: 'Ruby',
          |                     description: 'Dynamic, reflective, object-oriented, general-purpose programming language...'
          |                 }
          |             ]
          |         }
          |     }
          | });
          | 
          | // Add and init View
          | var mainView = myApp.addView('.view-main');
          | 
      h3 Access And Modify Templates/Pages Data      
      p We may access and modify specified <code>template7Data</code> in any moment. It is accessible in global <code>Template7.data</code> object, or in its alias <code>myApp.template7Data</code>
      h3 Page & URL Rules
      p It is everything simple here: 
      ul
        li 
          p If you specify property name that starts from <code>url:</code> then this context will be applied for the page with specified URL
        li 
          p If you specify property name that starts from <code>page:</code> then this context will be applied for the page with specified page name which is in <code>data-page</code> attribute
      p It is recommended to use <code>url:</code> where possible because it provides more accurate detection. 
      p But sometimes it could be impossible to use <code>url:</code>, for example in pages with URLs with different GET parameters (like about.html?id=1 and about.html?id=2) or for Dynamic pages. In this case we may use <code>page:</code> rule
        
      p So for the specified above templates data, we may use the following formatting in pages:
      p
        b about.html:
      pre
        code
          | &lt;div class="page" data-page="about"&gt;
          |     &lt;div class="page-content"&gt;
          |         &lt;p&gt;Hello, my name is {{name}} and i am {{age}} years old {{position}} at {{company}}&lt;/p&gt;
          |     &lt;/div&gt;
          | &lt;/div&gt;
      p
        b contacts.html:
      pre
        code          
          | &lt;div class="page" data-page="contacts"&gt;
          |     &lt;div class="page-content"&gt;
          |         &lt;p&gt;You can contact me:&lt;/p&gt;
          |         &lt;p&gt;By phone: {{tel}}&lt;/p&gt;
          |         &lt;p&gt;By email: {{email}}&lt;/p&gt;
          |     &lt;/div&gt;
          | &lt;/div&gt;
      h3 Plain Data Objects
      p Plain data objects in templates data provide more complex and more customizable way of pages data handling. Such objects allow us to pass custom context to loaded page using usual links and special <code>data-context-name</code> attribute on them.
      p Let's look at the following example where we have index page with links to page with languages list that contains link to another detail language page:
      p
        b index.html:
      pre
        code
          | &lt;div class="list-block"&gt;
          |   &lt;ul&gt;
          |     &lt;li&gt;
          |       &lt;a href="languages.html" class="item-link item-content" data-context-name="languages"&gt;
          |           &lt;div class="item-inner"&gt;
          |             &lt;div class="item-title"&gt;Languages&lt;/div&gt;
          |           &lt;/div&gt;
          |       &lt;/a&gt;
          |     &lt;/li&gt;
          |   &lt;/ul&gt;
          | &lt;/div&gt;
      p
        b languages.html:      
      pre
        code
          | &lt;div class="page" data-page="languages"&gt;
          |   &lt;div class="page-content"&gt;
          |     &lt;div class="content-block-title"&gt;Frontend&lt;/div&gt;
          |     &lt;div class="list-block"&gt;
          |       &lt;ul&gt;
          |         &lt;!-- Iterate through frontend languages --&gt;
          |         {{#each this.frontend}}
          |         &lt;li&gt;
          |           &lt;!-- As a context name for this link we pass context path from template7Data root --&gt;
          |           &lt;a href="language-details.html" class="item-link item-content" data-context-name="languages.frontend.{{@index}}"&gt;
          |               &lt;div class="item-inner"&gt;
          |                 &lt;div class="item-title"&gt;{{this.name}}&lt;/div&gt;
          |               &lt;/div&gt;
          |           &lt;/a&gt;
          |         &lt;/li&gt;
          |         {{/each}}
          |       &lt;/ul&gt;
          |     &lt;/div&gt;
          |     &lt;div class="content-block-title"&gt;Backend&lt;/div&gt;
          |     &lt;div class="list-block"&gt;
          |       &lt;ul&gt;
          |         &lt;!-- Iterate through backend languages --&gt;
          |         {{#each this.backend}}
          |         &lt;li&gt;
          |           &lt;!-- As a context name for this link we pass context path from template7Data root --&gt;
          |           &lt;a href="language-details.html" class="item-link item-content" data-context-name="languages.backend.{{@index}}"&gt;
          |               &lt;div class="item-inner"&gt;
          |                 &lt;div class="item-title"&gt;{{this.name}}&lt;/div&gt;
          |               &lt;/div&gt;
          |           &lt;/a&gt;
          |         &lt;/li&gt;
          |         {{/each}}
          |       &lt;/ul&gt;
          |     &lt;/div&gt;
          |   &lt;/div&gt;
          | &lt;/div&gt;          
      p
        b language-details.html:      
      pre
        code
          | &lt;div class="page" data-page="language-details"&gt;
          |   &lt;div class="page-content"&gt;
          |     &lt;div class="content-block-title"&gt;{{name}}&lt;/div&gt;
          |     &lt;div class="content-block"&gt;
          |       &lt;p&gt;{{description}}&lt;/p&gt;
          |     &lt;/div&gt;
          |   &lt;/div&gt;
          | &lt;/div&gt;
      p So, using <code>data-context-name</code> link attribute we may pass required context from <code>template7Data</code>. As you note, it also supports context paths (usign <code>.</code> separator) that allow us to pass child properties. 
      p For example, using context path we may create link to CSS language details page:
      pre
        code
          | &lt;a href="language-details.html" data-context-name="languages.frontend.1"&gt;CSS&lt;/a&gt;
      p In JavaScript, we may also do the same using View's Router <code>.load()</code> method and <code>contextName</code> property:
      pre
        code.js
          | mainView.router.load({
          |     url: 'language-details.html',
          |     contextName: 'languages.frontend.0'
          | })
      h2 Pass Custom Context
      p Framework7 allows to pass custom context to any laoded Ajax or Dynamic page.
      p We may pass custom context for any page using <code>data-context</code> attribute on link, where we need to put valid stringified JSON:
      pre
        code
          | &lt;a href='contacts.html' data-context='{"tel": "(999)-111-22-33", "email": "contact@john.doe"}'&gt;Contacts&lt;/a&gt;
      p Or, in JavaScript, we may pass custom context using View's Router <code>.load()</code> method and <code>context</code> property:
      pre
        code.js
          | mainView.router.load({
          |     url: 'contacts.html',
          |     context: {
          |       tel: '(999)-111-22-33',
          |       email: 'contact@john.doe'
          |     }
          | })
      p Or by specifying one of required plain data from <code>template7Data</code>:
      pre
        code.js
          | mainView.router.load({
          |     url: 'language-details.html',
          |     context: Template7.data.languages.frontend[1] // CSS
          | })      

      h2 Load Templates Directly
      p If you use <a href="template7-auto-compilation.html">templates auto compilation</a> you may render and load them on the fly as a Dynamic pages.
      p Let's look on another example where we just have the following page templates in index file:
      pre
        code.js
          | &lt;script id="contactsTemplate" type="text/template7"&gt;
          |   &lt;div class="page" data-page="contacts"&gt;
          |     &lt;div class="page-content"&gt;
          |         &lt;p&gt;You can contact me:&lt;/p&gt;
          |         &lt;p&gt;By phone: {{tel}}&lt;/p&gt;
          |         &lt;p&gt;By email: {{email}}&lt;/p&gt;
          |     &lt;/div&gt;
          |   &lt;/div&gt;
          | &lt;/script&gt;
          | 
          | &lt;script id="aboutTemplate" type="text/template7"&gt;
          |   &lt;div class="page" data-page="about"&gt;
          |     &lt;div class="page-content"&gt;
          |         &lt;p&gt;Hell, my name is {{name}}. I am {{age}} years old:&lt;/p&gt;
          |     &lt;/div&gt;
          |   &lt;/div&gt;
          | &lt;/script&gt;
      p In our JavaScript:
      pre
        code.js
          | var myApp = new Framework7({
          |     precompileTemplates: true, //
          |     template7Pages: true, //enable Template7 rendering for pages
          |     template7Data: {
          |         // Data for contacts page
          |         'page:contacts': {
          |               tel: '(999)-111-22-33',
          |               email: 'contact@john.doe'
          |         }
          |     }
          | })
      p Now we need to load specified templates as pages. 
      p For "contacts" page we already have required data in <code>template7Data</code>. So to specify required template we need to use <code>data-template</code> attribute were we need to specify template id:
      pre
        code
          | &lt;!-- We need to specify template id in data-template attribute --&gt;
          | &lt;a href="#" data-template="contactsTemplate"&gt;Contacts&lt;/a&gt;
      p For about page, we don't have any specified data, so we can do that by passing custom context:
      pre
        code
          | &lt;a href="#" data-template="aboutTemplate" data-context='{"name": "John Doe", "age": "35"}'&gt;About Me&lt;/a&gt;
      p And of course, we can do the same in JavaScript using View's <code>.load()</code> method and <code>template</code> property:
      pre
        code
          | //To load contacts page from template:
          | mainView.router.load({
          |     template: Template7.templates.contactsTemplate // template already compiled and available as a property of Template7.templates
          | })
          | 
          | //To load about page from template with custom data:
          | mainView.router.load({
          |     template: Template7.templates.aboutTemplate, // template already compiled and available as a property of Template7.templates
          |     context: {
          |         name: 'John Doe',
          |         age: 35
          |     }
          | })
      h2 URL Query
      p When using Template7 rendering for Ajax pages, its context will be always extended with special <code>url_query</code> property that contains URL GET parameters:
      pre
        code
          | &lt;a href="person.html?firstname=John&lastname=Doe&age=33"&gt;John Doe&lt;/a&gt;
          | &lt;a href="person.html?firstname=Mike&lastname=Doe&age=26"&gt;Mike Doe&lt;/a&gt;
      p
        b person.html
      pre
        code
          | &lt;div class="page" data-page="person"&gt;
          |     &lt;div class="page-content"&gt;
          |         &lt;p&gt;Hello, my name is {{url_query.firstname}} {{url_query.lastname}}. I am {{url_query.age}} years old.&lt;/p&gt;
          |     &lt;/div&gt;
          | &lt;/div&gt;